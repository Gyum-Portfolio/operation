---
- name: Setup base
  hosts: all
  become: true

  tasks:
    - name: Ensure key file exists
      stat:
        path: "{{ item }}"
      register: key_file
      loop:
        - "../keys/anyan.pub"
        - "../keys/pratham.pub"
        #add keys here

    - name: Register keys that exist
      ansible.posix.authorized_key:
        user: vagrant
        state: present
        key: "{{ lookup('file', item.item) }}"
      loop: "{{ key_file.results | selectattr('stat.exists', 'defined') | selectattr('stat.exists') | list }}"
      loop_control:
        label: "{{ item.item }}"

    - name: STEP 5 - Disable swap
      shell: swapoff -a

    - name: Remove swap entry from /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*[^#]\S+\s+swap\s'
        state: absent

    - name: STEP 6 - br_netfilter
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Load br_netfilter module now
      modprobe:
        name: br_netfilter
        state: present

    - name: STEP 7 - IPv4 forwarding
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: net.bridge.bridge-nf-call-ip6tables, value: 1 }
        - { key: net.bridge.bridge-nf-call-iptables, value: 1 }
        - { key: net.ipv4.ip_forward, value: 1 }

    - name: STEP 8 - static /etc/hosts file
      copy:
        src: ../hosts
        dest: /etc/hosts

    # Step 9: Add Kubernetes repository
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Dependencies #making sure all dependencies are installed
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
          - lsb-release
          - software-properties-common

    - name: Create directory for Kubernetes GPG
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Add Kubernetes APT key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state: present

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
        state: present

    - name: Update apt cache after adding Kubernetes repository
      ansible.builtin.apt:
        update_cache: yes

    # Step 10: Install Kubernetes components
    - name: Install Kubernetes components
      ansible.builtin.apt:
        name:
          - containerd=1.7.24-*
          - runc=1.1.12-*
          - kubelet=1.32.4-*
          - kubeadm=1.32.4-*
          - kubectl=1.32.4-*
        state: present
        update_cache: yes

    # Step 11: Configure Containerd
    - name: Create containerd service
      ansible.builtin.service:
        name: containerd
        state: started

    - name: Ensure /etc/containerd directory exists
      file:
        path: /etc/containerd
        state: directory

    - name: Dump default containerd config if missing
      command: containerd config default
      args:
        creates: /etc/containerd/config.toml
      register: containerd_default_cfg

    - name: Write default config to /etc/containerd/config.toml
      copy:
        content: "{{ containerd_default_cfg.stdout }}"
        dest: /etc/containerd/config.toml
      when: containerd_default_cfg is changed

    - name: Disable AppArmor in containerd CRI plugin
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*disable_apparmor\s*='
        line: "      disable_apparmor = true"
        insertafter: '^\[plugins\."io.containerd.grpc.v1.cri"\]'
      notify: Restart containerd

    - name: Set pause sandbox image in containerd CRI plugin
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*sandbox_image\s*='
        line: '      sandbox_image = "registry.k8s.io/pause:3.10"'
        insertafter: '^\[plugins\."io.containerd.grpc.v1.cri"\]'
      notify: Restart containerd

    - name: Enable systemd cgroup driver for runc in containerd
      blockinfile:
        path: /etc/containerd/config.toml
        marker: "# {mark} ANSIBLE RUNC OPTIONS"
        insertafter: '^\[plugins\."io.containerd.grpc.v1.cri"\.containerd\.runtimes\.runc\.options\]'
        block: |
          SystemdCgroup = true
      notify: Restart containerd

    - name: Enable and start kubelet
      ansible.builtin.service:
        name: kubelet
        enabled: yes
        state: started

  handlers:
    - name: Restart containerd
      ansible.builtin.service:
        name: containerd
        state: restarted
